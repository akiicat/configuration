set nocompatible                 " be iMproved, required, will reset cpoptions
filetype off                     " required

if !isdirectory($HOME.'/.vim/swap/')
    silent call mkdir ($HOME.'/.vim/swap/', 'p', 0700)
endif
set directory^=$HOME/.vim/swap// " set swap file path

let mapleader = ','              " set leader
let g:mapleader = ','            " set leader

call plug#begin()

Plug 'mg979/vim-visual-multi'
Plug 'junegunn/vim-easy-align'
Plug 'airblade/vim-gitgutter'
Plug 'ctrlpvim/ctrlp.vim'       " find files

" trace code
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'wenlongche/SrcExpl'
Plug 'yegappan/taglist'
Plug 'preservim/tagbar'
Plug 'hari-rangarajan/CCTree'       " https://github.com/hari-rangarajan/CCTree/blob/master/plugin/cctree.vim
Plug 'will133/vim-dirdiff'
Plug 'akiicat/autoload_cscope.vim'
" Plug 'joe-skb7/cscope-maps'
" Plug 'wenlongche/Trinity'

" Optional
" Plug 'mattn/emmet-vim'            " html jxs
" Plug 'justinmk/vim-ipmotion'    " jump around paragraphs
" Plug 'mbbill/undotree'
" Plug 'rstacruz/sparkup', {'rtp': 'vim'}
" Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
" Plug 'vim-scripts/RltvNmbr.vim'     " show both number and relativenumber
Plug 'vim-scripts/google.vim'           " Indent file for Google C++ Coding Style
Plug 'Yggdroot/indentLine'
Plug 'simnalamburt/vim-mundo'       " undo record

" Syntax highlighting
Plug 'ap/vim-css-color'
" Plug 'nikvdp/ejs-syntax', { 'for': 'ejs' }
" Plug 'posva/vim-vue', { 'for': 'vue' }
" Plug 'rhysd/vim-crystal', { 'for': ['cr', 'crystal'] }
" Plug 'slim-template/vim-slim', { 'for': ['slim'] }
" Plug 'vale1410/vim-minizinc', { 'for': ['mzn', 'fzn'] }

" theme
Plug 'itchyny/lightline.vim' " Light line status bar
Plug 'flazz/vim-colorschemes'
Plug 'rafi/awesome-vim-colorschemes'
Plug 'akiicat/vim-switching-colors'

call plug#end()

" Install
" vim +PlugInstall
" vim +PlugInstall +qall
" :PlugInstall
" vim-go
" :GoInstallBinaries

filetype plugin indent on    " required

" Put your non-Plugin stuff after this line

" ---- Settings ----
" file
set noautoread                 " Reload files when changed on disk, i.e. via `git checkout` (default off)
set noautowrite                " Saves the file automatically when you use the :n (or :p, :first, :last) commands to switch to another file. (default off)
set noconfirm                  " Prompt confirmation on save
set history=2000               " How many lines of history vim has to remember (default 50)
set updatetime=750             " Git Gutter, Swap file, vim window update time (default 4000)
set nobackup                   " Do not keep a backup file (default nobackup)

" command
set magic                      " For regular expressions turn magic on (default magic)
set wildmode=longest,list      " Command complete. reference to: `:h wildmode`
" set wildmenu                 " Require wildmode include full
" set wildignore=*.o,*~,*.pyc,*.class
" set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc

" edit
set completeopt=menu,preview   " Setting completion menu (default menu,preview)
" set whichwrap+=<,>,h,l,[,]   " Allow specified keys that move the cursor left/right to move to the previous/next line when the cursor is on the first/last character in the line. (defualt b,s)

" view
set number
set norelativenumber
set title                      " Change the terminal's title (default notitle)
set shortmess=filnxtToOI       " Set status bar (default filnxtToOS)
set laststatus=2               " Always show the status light line status bar (default 1)
set showtabline=2              " Always show the tabs (default 1)

" scroll
set nowrap                     " Display long lines (default wrap)
set scrolloff=0                " Minimal number of screen lines to keep above and below the cursor. (default 0)
set sidescroll=1
set sidescrolloff=0            " The minimal number of screen columns to keep to the left and to the right of the cursor if 'nowrap' is set.

" indent
set autoindent                 " Copy indent from current line when starting a new line
set smartindent                " Do smart autoindenting when starting a new line. Works for C-like programs. If 'cindent' and 'indentexpr' is unset
set shiftround                 " Round indent to multiple of 'shiftwidth'. CTRL-T and CTRL-D in Insert mode always round the indent. (default off)

set expandtab                  " Tab to space. See also :retab
set nosmarttab                 " When on, a <Tab> in front of a line inserts blanks according to 'shiftwidth'. When off, a <Tab> always inserts blanks according to 'tabstop' or 'softtabstop'. (default off)

set shiftwidth=4               " Used for 'cindent', >>, <<, etc.
set softtabstop=4              " Number of spaces that a <Tab> counts for while performing editing operations.
set tabstop=4                  " Number of spaces that a <Tab> in the file counts for.

set backspace=indent,eol,start " Allow backspacing over autoindent, line breaks, and the start of insert. Backspace issue on vim 8.

" split
set splitbelow                 " When on, splitting a window will put the new window below the current one. (default off)
set splitright                 " When on, splitting a window will put the new window right of the current one. (default off)

" search
set nohlsearch                 " Add a colored background to all the search results
set noincsearch                " See the search results as you start typing the search word
set noignorecase               " Perform case insensitive search
set nosmartcase                " If you enter a search query in lowercase, the search will be case insensitive. If you enter a search query that contains one or more letters in uppercase, the search will be sensitive.

" status line
set showcmd                    " Display incomplete commands (default off)
set noshowmode                 " Display current modes `-- INSERT --` is unnecessary anymore (default on)
set noshowmatch                " Jump to matches when entering parentheses (default off)
set matchtime=5                " Tenths of a second to show the matching parenthesis (default 5) 0.5 second

" fold
set foldmethod=syntax          " Manual indent marker syntax diff
set foldcolumn=3               " A column with the specified width is shown at the side of the window which indicates open and closed folds.  The maximum value is 12. (default 0)
set foldopen-=block            " Preventing vim to auto-expand folds
" ---- End Settings ----

" ---- CCTree ----
let CCTreeEnhancedSymbolProcessing=1
let g:CCTreeKeyHilightTree="<C-\\>l"
let g:CCTreeRecursiveDepth=0
let g:CCTreeMinVisibleDepth=0
let g:CCTreeWindowVertical=0
let g:CCTreeOrientation="botright"
let g:CCTreeWindowHeight=8
" ---- End CCTree ----

" ---- Syntax Highlight ----
syntax on
set t_Co=256

hi ColorColumn ctermbg=52
hi CursorLine ctermfg=NONE ctermbg=237 cterm=NONE
hi CursorColumn ctermfg=NONE ctermbg=237 cterm=NONE

autocmd ColorScheme ron,default hi Comment ctermfg=DarkGray guifg=DarkGray cterm=NONE gui=NONE
colorscheme ron
" ---- End Syntax Highlight ----

" ---- Vim Switching Colors ----
let g:themes = 'ron default scheakur github'

nmap <F3> :call NextColor(1)<CR>
nmap <S-F3> :call NextColor(-1)<CR>
" ---- End Vim Switching Colors ----

" ---- NERDTree ----
" open NERDTree automatically when vim starts up on opening a directory
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | :q | endif

" show hidden files
let NERDTreeShowHidden=1
" ---- End NERDTree ----

" ---- Git Gutter ----
" get vim-gitgutter's original colours (based on git-diff's colours in my terminal):
hi GitGutterAdd    ctermfg=Green
hi GitGutterChange ctermfg=Yellow
hi GitGutterDelete ctermfg=Red
nmap ghs <Plug>(GitGutterStageHunk)
nmap ghu <Plug>(GitGutterUndoHunk)
nmap ghp <Plug>(GitGutterPreviewHunk)

" jump between hunks
nmap <silent> <leader>x :GitGutterNextHunk<CR>:GitGutterPreviewHunk<CR>
nmap <silent> <leader>gx :GitGutterPrevHunk<CR>:GitGutterPreviewHunk<CR>
" ---- End Git Gutter ----

" ---- Easy Align ----
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
" ---- End Easy Align ----

" ---- Tab ----
" jump to the between tabs
nmap <C-h> gT
nmap <C-l> gt
nmap <C-j> :tabmove -1<cr>
nmap <C-k> :tabmove +1<cr>
" ---- End Tab ----

" ---- Copy and Paste ----
" copy gy
" vmap <silent> gy :<C-U>silent<Space>'<,'>w<Space>!pbcopy<CR>

" paste alt + v
" nmap <silent> √ :r!<Space>pbpaste<CR>
" ---- End Copy and Paste ----

" ---- Vim Go ----
let g:go_fmt_command = "goimports"
let g:go_fmt_autosave = 1
" ---- End Vim Go ----

" ---- Indent ----
let g:indentLine_char = '┊'

" Reselect visual block after indent/outdent
vmap < <gv
vmap > >gv
" ---- End Indent ----

" ---- Window ----
" nmap <C-h> <C-w>h
" nmap <C-j> <C-w>j
" nmap <C-k> <C-w>k
" nmap <C-l> <C-w>l
" ---- End Window ----

" ---- Tag ---
" Open tag in new tab
" nmap g<C-]> :execute 'tab tag '.expand('<cword>')<CR>
" ---- End Tag ---

" ---- Control ----
" paste
set pastetoggle=<F2>
autocmd InsertLeave * set nopaste

nmap <leader>w :set wrap!<CR>
nmap <leader>n :set number!<CR>
nmap <leader>r :set relativenumber!<CR>
nmap <leader>h :set hlsearch!<CR>
nmap <leader>u :set ignorecase!<CR>
nmap <leader>c :set cursorcolumn! cursorline!<CR>
" augroup Foo
"   autocmd InsertLeave,WinEnter * set cursorline cursorcolumn
"   autocmd InsertEnter,WinLeave * set nocursorline nocursorcolumn
" augroup END

" zoom in & out
nmap <leader>i <c-w>_ \| <c-w>\|
nmap <leader>o <c-w>=

nmap <leader>e :SrcExplToggle<CR>
nmap <leader>t :TlistToggle<CR>
nmap <leader>q :NERDTreeToggle<CR>:NERDTreeMirror<CR>
nmap <leader>; :IndentLinesToggle<CR>

nmap <leader>z :call NextFoldMethod(1)<CR>
nmap <leader>Z :call NextFoldMethod(-1)<CR>
let s:foldmethods = ['manual', 'indent', 'syntax', 'diff']
function! NextFoldMethod(count)
    let method = split(execute('set foldmethod'), '=')[1]
    let current = index(s:foldmethods, method)
    let current = (current + a:count) % len(s:foldmethods)
    execute 'set foldmethod='.s:foldmethods[current]
    set foldmethod?
endfunction

nmap <leader>f :call NextFoldColumn()<CR>
function! NextFoldColumn()
    if split(execute('set foldcolumn'), '=')[1] == '0'
        set foldcolumn=3 foldcolumn?
    else
        set foldcolumn=0 foldcolumn?
    endif
endfunction

nmap <leader>v :call CopyMode()<CR>
let s:toggle = 0
function! CopyMode()
    if s:toggle == 0
        let s:toggle = 1
        set nonumber norelativenumber foldcolumn=0
        execute('IndentLinesDisable')      " Plug 'Yggdroot/indentLine'
    else
        let s:toggle = 0
        set number foldcolumn=3
        execute('IndentLinesEnable')       " Plug 'Yggdroot/indentLine'
    endif
endfunction

nmap <leader>l :call ColorColumn()<CR>
let s:colorcolumntoggle = 0
function! ColorColumn()
    if s:colorcolumntoggle == 0
        let s:colorcolumntoggle = 1
        set colorcolumn=81,121
    else
        let s:colorcolumntoggle = 0
        set colorcolumn=
    endif
endfunction
" ---- End Control ----

" ---- Event ----
" Indent
autocmd FileType python set tabstop=4 shiftwidth=4 expandtab autoindent
autocmd FileType ruby set tabstop=2 shiftwidth=2 softtabstop=2 expandtab autoindent
" autocmd BufRead,BufNew *.md,*.mkd,*.markdown  set filetype=markdown.mkd

" Remove Trailing Whitespaces
" https://vim.fandom.com/wiki/Remove_unwanted_spaces#:~:text=One%20way%20to%20make%20sure,all%20trailing%20whitespace%20before%20saving.
autocmd BufWritePre * %s/\s\+$//e

" Fold
autocmd Syntax * setlocal foldmethod=syntax
autocmd Syntax * normal zR

autocmd BufNewFile *.sh,*.py exec ":call AutoSetFileHead()"
function! AutoSetFileHead()
    if &filetype == 'sh'
        call setline(1, "\#!/bin/bash")
    endif
    if &filetype == 'python'
        call setline(1, "\#!/usr/bin/env python")
        call append(1, "\# encoding: utf-8")
    endif
    normal Go
endfunc
" ---- End Event ----

" cscope
" find . -name '*.h' -o -name '*.c' -o -name '*.cc' -o -name '*.cpp' > cscope.files
" cscope -i cscope.files

" set tags=./tags,./TAGS,tags,TAGS
" autocmd VimEnter * execute('CCTreeLoadDB cscope.out')

" Update
" curl -L http://get.akiicat.com | bash -s -- vim

